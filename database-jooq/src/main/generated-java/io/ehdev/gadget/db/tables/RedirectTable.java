/*
 * This file is generated by jOOQ.
 */
package io.ehdev.gadget.db.tables;


import io.ehdev.gadget.db.Gadget;
import io.ehdev.gadget.db.Indexes;
import io.ehdev.gadget.db.Keys;
import io.ehdev.gadget.db.converter.TimestampConverter;
import io.ehdev.gadget.db.tables.records.RedirectRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RedirectTable extends TableImpl<RedirectRecord> {

    private static final long serialVersionUID = 481397319;

    /**
     * The reference instance of <code>gadget.redirect</code>
     */
    public static final RedirectTable REDIRECT = new RedirectTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RedirectRecord> getRecordType() {
        return RedirectRecord.class;
    }

    /**
     * The column <code>gadget.redirect.redirect_id</code>.
     */
    public final TableField<RedirectRecord, Long> REDIRECT_ID = createField("redirect_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>gadget.redirect.alias</code>.
     */
    public final TableField<RedirectRecord, String> ALIAS = createField("alias", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>gadget.redirect.variables</code>.
     */
    public final TableField<RedirectRecord, String> VARIABLES = createField("variables", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>gadget.redirect.destination</code>.
     */
    public final TableField<RedirectRecord, String> DESTINATION = createField("destination", org.jooq.impl.SQLDataType.VARCHAR(4096).nullable(false), this, "");

    /**
     * The column <code>gadget.redirect.user</code>.
     */
    public final TableField<RedirectRecord, String> USER = createField("user", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>gadget.redirect.update_count</code>.
     */
    public final TableField<RedirectRecord, Long> UPDATE_COUNT = createField("update_count", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>gadget.redirect.created_at</code>.
     */
    public final TableField<RedirectRecord, Instant> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new TimestampConverter());

    /**
     * Create a <code>gadget.redirect</code> table reference
     */
    public RedirectTable() {
        this(DSL.name("redirect"), null);
    }

    /**
     * Create an aliased <code>gadget.redirect</code> table reference
     */
    public RedirectTable(String alias) {
        this(DSL.name(alias), REDIRECT);
    }

    /**
     * Create an aliased <code>gadget.redirect</code> table reference
     */
    public RedirectTable(Name alias) {
        this(alias, REDIRECT);
    }

    private RedirectTable(Name alias, Table<RedirectRecord> aliased) {
        this(alias, aliased, null);
    }

    private RedirectTable(Name alias, Table<RedirectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RedirectTable(Table<O> child, ForeignKey<O, RedirectRecord> key) {
        super(child, key, REDIRECT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gadget.GADGET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REDIRECT_ALIAS, Indexes.REDIRECT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RedirectRecord, Long> getIdentity() {
        return Keys.IDENTITY_REDIRECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RedirectRecord> getPrimaryKey() {
        return Keys.KEY_REDIRECT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RedirectRecord>> getKeys() {
        return Arrays.<UniqueKey<RedirectRecord>>asList(Keys.KEY_REDIRECT_PRIMARY, Keys.KEY_REDIRECT_ALIAS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedirectTable as(String alias) {
        return new RedirectTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedirectTable as(Name alias) {
        return new RedirectTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RedirectTable rename(String name) {
        return new RedirectTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RedirectTable rename(Name name) {
        return new RedirectTable(name, null);
    }
}
